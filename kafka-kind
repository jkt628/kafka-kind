#!/usr/bin/env bash
# configurables
: "${MAXWAIT:=120}"

PROG=${0##*/}
LF=$'\n'
bold=$(tput bold)
normal=$(tput sgr0)

trap 'echo "$normal" >/dev/tty' EXIT

@() {
	echo "$LF$bold$*$normal" >/dev/tty
	"$@"
}

cd -P "$(dirname "$0")" || exit 1

if [[ "$1" = down ]]; then
  ! netstat -rn | grep -qE '172.23.150.224.*(wg|tun)[[:digit:]]' || @ wg-quick down wireguard/wg0.conf
  @ kind delete cluster --name kafka
	@ docker-compose down
	exit 0
fi

set +o | grep -qF '+o verbose' || debug="--debug"
http='^https?://'
portForwardFailed='already in use| configuration '
installOrUpgrade='^(install|upgrade)$'
digits='^[[:digit:]]+$'

# redirects
helm=$(which helm)
kubectl=$(which kubectl)

helm() {
	if [[ ! "$1" =~ $installOrUpgrade ]]; then
		$helm "$@"
		return
	fi
	"$helm" $debug "$@" --post-renderer ./render-local-registry
}

kubectl() {
	if [[ "$1" == apply && "$2" == -f ]]; then
	  shift 2
		local -a cmd
		if [[ "$1" =~ $http ]]; then
			cmd=(curl -sSL "$1")
		else
			cmd=(cat "$@")
		fi
		"${cmd[@]}" | ./render-local-registry | "$kubectl" apply -f -
		return
	fi
	if [[ "$1" != port-forward ]]; then
		"$kubectl" "$@"
		return
	fi
	while ((1)); do
		[[ $("$kubectl" "$@" 2>&1) =~ $portForwardFailed ]] && return
		sleep 1
	done
}

if ((BASH_VERSINFO[0] >= 5)); then
	EPOCHSECONDS() {
		echo "$EPOCHSECONDS"
	}
else
	EPOCHSECONDS() {
		date +%s
	}
fi

wait_for() {
	local stop=$(($(EPOCHSECONDS) + MAXWAIT))
	if [[ "$1" =~ $digits ]]; then
		stop=$(($(EPOCHSECONDS) + $1))
		shift
	fi
	while ! $1; do
		sleep 1
		echo -n .
		if (($(EPOCHSECONDS) > stop)); then
			echo >&2 -n ' failed!'
			return 1
		fi
	done
}

@ docker-compose up -d

netstat -rn | grep -qF 172.23.150.224 || @ wg-quick up wireguard/wg0.conf

KIND_EXPERIMENTAL_DOCKER_NETWORK=kafka-kind_default @ kind create cluster --config kafka-cluster.yaml

@ kubectl apply -f https://projectcontour.io/quickstart/contour.yaml
@ kubectl patch daemonsets.apps -n projectcontour envoy -p "$(curl -sS https://kind.sigs.k8s.io/examples/ingress/contour/patch.json)"
@ helm upgrade --install -n metallb --create-namespace -f metallb-value.yaml metallb metallb/metallb
@ helm upgrade --install -n kafka --create-namespace -f kafka-value.yaml kafka confluentinc/cp-helm-charts
@ helm upgrade --install -n kafka --create-namespace -f cmak-value.yaml cmak stable/kafka-manager
@ kubectl apply -f [5-9][0-9]-*/*.yaml

echo -n "$LF$bold"Waiting for schema registry...
schema_registry() { curl -s http://kafka-cp-schema-registry.kafka/config |& grep -qF compatibility; }
wait_for schema_registry
echo "$normal"

# process samples

schema() {
	file=${1##*/}
	jq -c '{"schema": tostring}' "$1" | @ curl -sSf -X POST -H 'Content-Type: application/json' -d@- http://schema.kafka/subjects/"${file/.avsc}"/versions | jq .
}

topic() {
	file=${1##*/}
	topic=${file/.json*}
	args=(--bootstrap-server kafka-cp-kafka-headless.kafka:9092 --topic "$topic")
	case "$topic" in
		*)
			producer=kafka-avro-console-producer
			args+=(--property schema.registry.url=http://kafka-cp-schema-registry.kafka --property value.schema="$(jq -c . schemas/"$topic"-value.avsc)")
			;;
	esac
	decompress "$1" | @ $producer "${args[@]}"
}

decompress() {
	case "$1" in
		*.xz) xz  -d -c "$1";;
		*.bz) bunzip -c "$1";;
		*.gz) gunzip -c "$1";;
		*) cat "$1";;
	esac
}

for arg; do
	case "$arg" in
		-h|--help)
			cat <<EOF
Usage $PROG [schemas|topics|all|schemas/*|topics/*]
Additional parameters preload sample data for all or specified schemas and topics.
EOF
			;;
		schemas|schemas/|all)
			for f in schemas/*; do
				schema "$f"
			done
			;;&
		topics|topics/|all)
			for f in topics/*; do
				topic "$f"
			done
			;;
		schemas/?*)
			schema "$arg"
			;;
		topics/?*)
			topic "$arg"
			;;
	esac
done
